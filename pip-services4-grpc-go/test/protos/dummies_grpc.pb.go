// Copyright 2015 gRPC authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.12.4
// source: test/protos/dummies.proto

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	Dummies_GetDummies_FullMethodName      = "/dummies.Dummies/get_dummies"
	Dummies_GetDummyById_FullMethodName    = "/dummies.Dummies/get_dummy_by_id"
	Dummies_CreateDummy_FullMethodName     = "/dummies.Dummies/create_dummy"
	Dummies_UpdateDummy_FullMethodName     = "/dummies.Dummies/update_dummy"
	Dummies_DeleteDummyById_FullMethodName = "/dummies.Dummies/delete_dummy_by_id"
)

// DummiesClient is the client API for Dummies service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DummiesClient interface {
	GetDummies(ctx context.Context, in *DummiesPageRequest, opts ...grpc.CallOption) (*DummiesPage, error)
	GetDummyById(ctx context.Context, in *DummyIdRequest, opts ...grpc.CallOption) (*Dummy, error)
	CreateDummy(ctx context.Context, in *DummyObjectRequest, opts ...grpc.CallOption) (*Dummy, error)
	UpdateDummy(ctx context.Context, in *DummyObjectRequest, opts ...grpc.CallOption) (*Dummy, error)
	DeleteDummyById(ctx context.Context, in *DummyIdRequest, opts ...grpc.CallOption) (*Dummy, error)
}

type dummiesClient struct {
	cc grpc.ClientConnInterface
}

func NewDummiesClient(cc grpc.ClientConnInterface) DummiesClient {
	return &dummiesClient{cc}
}

func (c *dummiesClient) GetDummies(ctx context.Context, in *DummiesPageRequest, opts ...grpc.CallOption) (*DummiesPage, error) {
	out := new(DummiesPage)
	err := c.cc.Invoke(ctx, Dummies_GetDummies_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummiesClient) GetDummyById(ctx context.Context, in *DummyIdRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, Dummies_GetDummyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummiesClient) CreateDummy(ctx context.Context, in *DummyObjectRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, Dummies_CreateDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummiesClient) UpdateDummy(ctx context.Context, in *DummyObjectRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, Dummies_UpdateDummy_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dummiesClient) DeleteDummyById(ctx context.Context, in *DummyIdRequest, opts ...grpc.CallOption) (*Dummy, error) {
	out := new(Dummy)
	err := c.cc.Invoke(ctx, Dummies_DeleteDummyById_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DummiesServer is the server API for Dummies service.
// All implementations must embed UnimplementedDummiesServer
// for forward compatibility
type DummiesServer interface {
	GetDummies(context.Context, *DummiesPageRequest) (*DummiesPage, error)
	GetDummyById(context.Context, *DummyIdRequest) (*Dummy, error)
	CreateDummy(context.Context, *DummyObjectRequest) (*Dummy, error)
	UpdateDummy(context.Context, *DummyObjectRequest) (*Dummy, error)
	DeleteDummyById(context.Context, *DummyIdRequest) (*Dummy, error)
	mustEmbedUnimplementedDummiesServer()
}

// UnimplementedDummiesServer must be embedded to have forward compatible implementations.
type UnimplementedDummiesServer struct {
}

func (UnimplementedDummiesServer) GetDummies(context.Context, *DummiesPageRequest) (*DummiesPage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDummies not implemented")
}
func (UnimplementedDummiesServer) GetDummyById(context.Context, *DummyIdRequest) (*Dummy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDummyById not implemented")
}
func (UnimplementedDummiesServer) CreateDummy(context.Context, *DummyObjectRequest) (*Dummy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateDummy not implemented")
}
func (UnimplementedDummiesServer) UpdateDummy(context.Context, *DummyObjectRequest) (*Dummy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateDummy not implemented")
}
func (UnimplementedDummiesServer) DeleteDummyById(context.Context, *DummyIdRequest) (*Dummy, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDummyById not implemented")
}
func (UnimplementedDummiesServer) mustEmbedUnimplementedDummiesServer() {}

// UnsafeDummiesServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DummiesServer will
// result in compilation errors.
type UnsafeDummiesServer interface {
	mustEmbedUnimplementedDummiesServer()
}

func RegisterDummiesServer(s grpc.ServiceRegistrar, srv DummiesServer) {
	s.RegisterService(&Dummies_ServiceDesc, srv)
}

func _Dummies_GetDummies_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummiesPageRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummiesServer).GetDummies(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummies_GetDummies_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummiesServer).GetDummies(ctx, req.(*DummiesPageRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummies_GetDummyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummiesServer).GetDummyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummies_GetDummyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummiesServer).GetDummyById(ctx, req.(*DummyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummies_CreateDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummiesServer).CreateDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummies_CreateDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummiesServer).CreateDummy(ctx, req.(*DummyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummies_UpdateDummy_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyObjectRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummiesServer).UpdateDummy(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummies_UpdateDummy_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummiesServer).UpdateDummy(ctx, req.(*DummyObjectRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Dummies_DeleteDummyById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DummyIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DummiesServer).DeleteDummyById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: Dummies_DeleteDummyById_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DummiesServer).DeleteDummyById(ctx, req.(*DummyIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Dummies_ServiceDesc is the grpc.ServiceDesc for Dummies service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Dummies_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dummies.Dummies",
	HandlerType: (*DummiesServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_dummies",
			Handler:    _Dummies_GetDummies_Handler,
		},
		{
			MethodName: "get_dummy_by_id",
			Handler:    _Dummies_GetDummyById_Handler,
		},
		{
			MethodName: "create_dummy",
			Handler:    _Dummies_CreateDummy_Handler,
		},
		{
			MethodName: "update_dummy",
			Handler:    _Dummies_UpdateDummy_Handler,
		},
		{
			MethodName: "delete_dummy_by_id",
			Handler:    _Dummies_DeleteDummyById_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "test/protos/dummies.proto",
}
